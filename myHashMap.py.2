"""
luis Orellana


Adapted from UCSD CSE12
"""

class MyHashMap:
    def __init__(self, load_factor=0.75, initial_capacity=16):
        self.load_factor = load_factor 
        self.capacity = initial_capacity 
        self.size = 0
        self.buckets = [[] for _ in range(self.capacity)]

    def resize(self):
        self.capacity *= 2
        new_buckets = [[] for _ in range(self.capacity)]
        for bucket in self.buckets:
            for entry in bucket:
                index = hash(entry.getKey()) % self.capacity
                new_buckets[index].append(entry)
        self.buckets = new_buckets

    def put(self, key, value):
        if key is None:
            raise KeyError("Key cannot be None")
        
        if self.size + 1 > self.capacity * self.load_factor:
            self.resize()

        index = hash(key) % self.capacity
        for entry in self.buckets[index]:
            if entry.getKey() == key:
                return False

        self.buckets[index].append(self.MyHashMapEntry(key, value))
        self.size += 1
        return True

    def replace(self, key, newValue):
        if key is None:
            raise KeyError("Key cannot be None")

        index = hash(key) % self.capacity
        for entry in self.buckets[index]:
            if entry.getKey() == key:
                entry.setValue(newValue)
                return True
        return False

    def remove(self, key):
        if key is None:
            raise KeyError("Key cannot be None")

        index = hash(key) % self.capacity
        bucket = self.buckets[index]
        for i, entry in enumerate(bucket):
            if entry.getKey() == key:
                del bucket[i]
                self.size -= 1
                return True
        return False

    def set(self, key, value):
        if key is None:
            raise KeyError("Key cannot be None")

        index = hash(key) % self.capacity
        for entry in self.buckets[index]:
            if entry.getKey() == key:
                entry.setValue(value)
                return

        self.put(key, value)

    def get(self, key):
        if key is None:
            raise KeyError("Key cannot be None")

        index = hash(key) % self.capacity
        for entry in self.buckets[index]:
            if entry.getKey() == key:
                return entry.getValue()
        return None

    def size(self):
        return self.size

    def isEmpty(self):
        return self.size == 0

    def containsKey(self, key):
        if key is None:
            raise KeyError("Key cannot be None")

        index = hash(key) % self.capacity
        for entry in self.buckets[index]:
            if entry.getKey() == key:
                return True
        return False

    def keys(self):
        all_keys = []
        for bucket in self.buckets:
            for entry in bucket:
                all_keys.append(entry.getKey())
        return all_keys

    class MyHashMapEntry:
        def __init__(self, key, value):
            self.key = key 
            self.value = value 

        def getKey(self):
            return self.key 
        
        def getValue(self):
            return self.value 
        
        def setValue(self, new_value):
            self.value = new_value 
if __name__ == "__main__":
    my_map = MyHashMap()
    my_map.put("key1", "value1")
    print(my_map.get("key1"))  
    my_map.replace("key1", "newValue")
    print(my_map.get("key1"))  
    print(my_map.containsKey("key1")) 
    my_map.remove("key1")
    print(my_map.containsKey("key1"))  