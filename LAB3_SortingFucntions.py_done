"""
sortingFunctions.py
Description: Implementation of sorting algorithms.
Luis orellana
"""

import time, random

# Implementation of insertionSort algorithm
def insertionSort(list_to_sort: list) -> None:
    # Iterate through all elements in the list starting from the second element
    for i in range(1, len(list_to_sort)):
        key = list_to_sort[i]
        j = i - 1
        # Move elements of list_to_sort[0..i-1], that are greater than key,
        # to one position ahead of their current position
        while j >= 0 and key < list_to_sort[j]:
            list_to_sort[j + 1] = list_to_sort[j]
            j -= 1
        list_to_sort[j + 1] = key

# Implementation of bubbleSort algorithm
def bubbleSort(list_to_sort: list) -> None:
    n = len(list_to_sort)
    # Traverse through all elements in the list
    for i in range(n):
        # Last i elements are already in place, so the inner loop can avoid checking them
        for j in range(0, n-i-1):
            # Swap if the element found is greater than the next element
            if list_to_sort[j] > list_to_sort[j+1]:
                list_to_sort[j], list_to_sort[j+1] = list_to_sort[j+1], list_to_sort[j]


# Returns a random list of the given length
def createRandomList(length):
    return random.sample(range(max(100, length)), length)   
# Returns the length of time (in seconds) that it took
# for the function_to_run to sort a list of length list_length
def getRuntime(function_to_run, list_length):
    # Create a new list to sort
    list_to_sort = createRandomList(list_length)
    # Get the time before running
    start_time = time.time()
    # Sort the given list
    function_to_run(list_to_sort)
    # Get the time after running
    end_time = time.time()
    # Return the difference
    return end_time - start_time


if __name__ == '__main__':
    list_length = 100 
    pass
