"""
sortingFunctions.py
Description: Implementation of sorting algorithms.
Luis orellana
"""

import time, random

# Implementation of insertionSort algorithm
def insertionSort(list_to_sort):
    # Iterate through the list, starting from the second element (index 1)
    for i in range(1, len(list_to_sort)):
        j = i
        # Move elements greater than the current element to the right
        # until a smaller or equal element is encountered
        while j > 0 and list_to_sort[j-1] > list_to_sort[j]:
            # Swap the current element with its predecessor
            list_to_sort[j], list_to_sort[j-1] = list_to_sort[j-1], list_to_sort[j]
            # Move to the previous index forcomparisons
            j -= 1

# Implementation of bubbleSort algorithm
def bubbleSort(list_to_sort):
    # Get the length of the input list
    n = len(list_to_sort)

    # Outer loop for each pass through the list
    for i in range(n - 1):
        # Inner loop for comparing and swapping elements
        for j in range(n - 1 - i):
            # Check if the current element is greater than the next one
            if list_to_sort[j] > list_to_sort[j + 1]:
                # Swap the elements if they are out of order
                list_to_sort[j], list_to_sort[j + 1] = list_to_sort[j + 1], list_to_sort[j]

# Returns a random list of the given length
def createRandomList(length):
    return random.sample(range(max(100, length)), length)   
# Returns the length of time (in seconds) that it took
# for the function_to_run to sort a list of length list_length
def getRuntime(function_to_run, list_length):
    # Create a new list to sort
    list_to_sort = createRandomList(list_length)
    # Get the time before running
    start_time = time.time()
    # Sort the given list
    function_to_run(list_to_sort)
    # Get the time after running
    end_time = time.time()
    # Return the difference
    return end_time - start_time


if __name__ == '__main__':
    list_length = 100 
    pass